/*
 * This file is generated by jOOQ.
 */
package com.mick.vuetinaut.jooq.model.tables;


import com.mick.vuetinaut.jooq.model.Indexes;
import com.mick.vuetinaut.jooq.model.Keys;
import com.mick.vuetinaut.jooq.model.Public;
import com.mick.vuetinaut.jooq.model.tables.records.NoteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Note extends TableImpl<NoteRecord> {

    private static final long serialVersionUID = -1565749770;

    /**
     * The reference instance of <code>public.note</code>
     */
    public static final Note NOTE = new Note();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoteRecord> getRecordType() {
        return NoteRecord.class;
    }

    /**
     * The column <code>public.note.uuid</code>.
     */
    public final TableField<NoteRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.note.notepad_uuid</code>.
     */
    public final TableField<NoteRecord, UUID> NOTEPAD_UUID = createField("notepad_uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.note.body</code>.
     */
    public final TableField<NoteRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.note.creator_user_uuid</code>.
     */
    public final TableField<NoteRecord, UUID> CREATOR_USER_UUID = createField("creator_user_uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.note.editor_user_uuid</code>.
     */
    public final TableField<NoteRecord, UUID> EDITOR_USER_UUID = createField("editor_user_uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.note.date_edited</code>.
     */
    public final TableField<NoteRecord, Timestamp> DATE_EDITED = createField("date_edited", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.note.date_created</code>.
     */
    public final TableField<NoteRecord, Timestamp> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.note</code> table reference
     */
    public Note() {
        this(DSL.name("note"), null);
    }

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    public Note(String alias) {
        this(DSL.name(alias), NOTE);
    }

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    public Note(Name alias) {
        this(alias, NOTE);
    }

    private Note(Name alias, Table<NoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Note(Name alias, Table<NoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Note(Table<O> child, ForeignKey<O, NoteRecord> key) {
        super(child, key, NOTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NoteRecord> getPrimaryKey() {
        return Keys.NOTE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NoteRecord>> getKeys() {
        return Arrays.<UniqueKey<NoteRecord>>asList(Keys.NOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Note as(String alias) {
        return new Note(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Note as(Name alias) {
        return new Note(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(String name) {
        return new Note(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(Name name) {
        return new Note(name, null);
    }
}
